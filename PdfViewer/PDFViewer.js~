import {Modal,Pressable, PixelRatio , View , Text , StyleSheet , Dimensions } from 'react-native';
import { Modal as PaperModal } from 'react-native-paper';
import React, { useRef, useState, useEffect} from 'react';
import Pdf from 'react-native-pdf';
import { BlurView } from 'expo-blur';
import FontAwesome from "@expo/vector-icons/FontAwesome";
import { RFPercentage} from "react-native-responsive-fontsize";
import * as ScreenOrientation from 'expo-screen-orientation';
import { usePDFier } from '../PdfierProvider/DataProvider';
import { StatusBar } from 'expo-status-bar';

const PDFViewer = () =>  {

  const [ FlexVal,setFlexVal] = useState([]);
  const [isLandScape,setLandScape] = useState(false);

  const {ViewData,OpenViewer,SetOpenViewer} = usePDFier();

const setPortraitOrientation = async () => {
    await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.PORTRAIT);
  };

  const setLandscapeOrientation = async () => {
    await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE);
  };

  const unlockOrientation = async () => {
    await ScreenOrientation.unlockAsync();
  };

const TruncatedText = ({ originalText, maxLength }) => {
  const truncatedText = originalText.length > maxLength
    ? `${originalText.slice(0, maxLength)}...`
    : originalText;

  return (
   <Text style={{ alignSelf:'center',color:'white',backgroundColor:'transparent'}}>{truncatedText}</Text>
  );
};

useEffect(() => {

if(ViewData.Paths){
    const initialFlexVal = Array(ViewData.Paths.length).fill(false);
    initialFlexVal[0] = true;
    initialFlexVal[1] = true;
    setFlexVal(initialFlexVal);
}
 }, [ViewData]);


const handleSingleTap = (index) => {

  const NewFlexArray = [...FlexVal];
  let ArrayLength = (NewFlexArray.length - 1);
  NewFlexArray[index] = false;
          if(index === ArrayLength){
               if( NewFlexArray[0] === false){
                   NewFlexArray[0] = true;
                }else if (NewFlexArray[1] == false){ NewFlexArray[1] = true; }

           }
          else if( index === (ArrayLength - 1)){
                  if( NewFlexArray[index+1] === false){
                   NewFlexArray[index+1] = true;
                }else if (NewFlexArray[0] == false){ NewFlexArray[0] = true; }
          }else{
             if( NewFlexArray[index+1] === false){
                   NewFlexArray[index+1] = true;
                }else if (NewFlexArray[index+2] == false){ NewFlexArray[index+2] = true; }

         }

 setFlexVal(NewFlexArray);
 };
//style={ FlexVal[index] ? styles.visible : styles.hidden }

      return (
<PaperModal
        dismissable={true}
        visible={OpenViewer}
        onDismiss={() => {
            setLandScape(false);
            SetOpenViewer(false);
            unlockOrientation();
        }}
contentContainerStyle={{flex:1}}
>

<BlurView intensity={20} tint="dark" style={{flex:1,flexDirection: isLandScape ? 'row' : 'coloumn' , gap:isLandScape ? RFPercentage(0.5) : 0 }}>
    {ViewData.Paths && ViewData.Paths.map((Data, index) => (
      <View  key={index} style={ FlexVal[index] ? styles.visible : styles.hidden }>
  <View style={{flex:0.05,flexDirection:'row',justifyContent:'space-evenly'}}>
   <View style={{flex:0.8}}>
       <Pressable style={{flexDirection:'row',justifyContent:'space-between'}}
          onPress={()=>{
        if(isLandScape === false){
          setLandscapeOrientation();
          setLandScape(true);
}else{
           setPortraitOrientation();
            setLandScape(false);
}
          }}>
            <FontAwesome
              size={RFPercentage(2.5)}
              style={{marginLeft:RFPercentage(0.5)}}
              name="rotate-left"
              color = "grey"
            />
        <Text style={{ alignSelf:'center',color:'white',backgroundColor:'transparent'}}>RotateView</Text>
    </Pressable>
</View>
   <View style={{flex:2}}>
   <TruncatedText originalText={ViewData.DocName[index]} maxLength={20} />
   </View>
   <View style={{flex:1}}>
       <Pressable onPress={() => alert('picked')}
style={{flexDirection:'row',justifyContent:'space-between'}}
>
            <FontAwesome
              size={RFPercentage(2.5)}
              style={{marginLeft:RFPercentage(0.5)}}
              name="exchange"
              color = "grey"
            />
        <Text style={{ alignSelf:'center',color:'white',backgroundColor:'transparent'}}>ExchangePdf</Text>
       </Pressable>
   </View>
</View>
        <Pdf
          trustAllCerts={false}
          source={{ uri:"/storage/emulated/0/Android/data/com.harsharma_0.PDFier/files/PDFier/Asdfg.pdf", cache: false }}
          onPageSingleTap={() => {
            handleSingleTap(index);
          }}
          style={styles.pdfVisible}
        />
      </View>
    ))}
</BlurView>
</PaperModal>
);

};
const styles = StyleSheet.create({
  visible: {
    flex:1,
    display:'flex',
  },
  hidden: {
    height:"50%",
    width:"100%",
    position:'absolute',
    marginTop:100000,
  },
pdfVisible:{
    flex: 1,
    alignSelf:'stretch',
    backgroundColor: 'transparent',
  },

});


export default PDFViewer;
/*
          source={{ uri:Data, cache: false }}

*/
